{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jotap\\\\Desktop\\\\projeto\\\\nlw04\\\\MovWork-FrontEnd\\\\src\\\\contexts\\\\ChallengeContext.tsx\";\nimport { createContext, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/jotap/Desktop/projeto/nlw04/MovWork-FrontEnd/src/contexts/ChallengeContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","resetChallenge","startNewChallenge","randomChallengeIndex","floor","random","length","challenge"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAgE;AACnE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD;;AAED,WAASY,cAAT,GAAyB;AACrBL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASM,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACO,MAAL,KAAgBpB,UAAU,CAACqB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGtB,UAAU,CAACkB,oBAAD,CAA5B;AAEAP,IAAAA,kBAAkB,CAACW,SAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAClB,MAAAA,KAAD;AAAQE,MAAAA,iBAAR;AAA2BE,MAAAA,mBAA3B;AAAgDI,MAAAA,qBAAhD;AAAuEG,MAAAA,OAAvE;AAAgFE,MAAAA,iBAAhF;AAAmGD,MAAAA,cAAnG;AAAmHN,MAAAA;AAAnH,KAAnC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH","sourcesContent":["import { createContext, useState, ReactNode } from \"react\";\r\nimport challenges from \"../../challenges.json\";\r\n\r\ninterface challenge{\r\n    type: 'body' | 'eye';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    currentExperience: number;\r\n    experienceToNextLevel: number;\r\n    challengesCompleted: number;\r\n    activeChallenge: challenge; \r\n\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({children}: ChallengesProviderProps){\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengesCompleted, setChallengesCompleted] = useState(0);\r\n\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n    function levelUp() {\r\n      setLevel(level+1);\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        setActiveChallenge(challenge)\r\n    }\r\n  \r\n    return(\r\n        <ChallengesContext.Provider value={{level, currentExperience, challengesCompleted, experienceToNextLevel, levelUp, startNewChallenge, resetChallenge, activeChallenge}}>\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}